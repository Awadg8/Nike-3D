




"use client"
import { Canvas } from "@react-three/fiber"
import { useGLTF } from "@react-three/drei"
import { motion } from "framer-motion"
import { useEffect, useState, Suspense } from "react"

const Model = () => {
  const { scene } = useGLTF("/shoe.glb")

  useEffect(() => {
    if (scene) {
      scene.traverse((child) => {
        if (child.isMesh) {
          child.castShadow = true
          child.receiveShadow = true
          if (child.material) {
            child.material.roughness = 0.3
            child.material.metalness = 0.2
          }
        }
      })
    }
  }, [scene])

  return (
    <primitive
      object={scene}
      scale={1} // Adjust to fit viewport
      position={[0, -0.5, 0]} // Properly center
      rotation={[0, Math.PI / 6, 0]} // Slight tilt
    />
  )
}

export default function ThreeDViewer() {
  const [isVisible, setIsVisible] = useState(false)

  useEffect(() => {
    setTimeout(() => {
      setIsVisible(true)
    }, 500)
  }, [])

  return (
    <motion.div
      initial={{ x: -300, y: -300, opacity: 0 }} // Start offscreen
      animate={{ x: 0, y: 0, opacity: 1 }} // Move to center
      transition={{ duration: 2, ease: "easeOut" }} // Smooth transition
      className="w-full h-screen flex items-center justify-center bg-[#0a0f1e]"
    >
      <Canvas
        shadows
        dpr={[1, 2]}
        camera={{ position: [0, 2, 10], fov: 35 }} // Move camera back
        gl={{ preserveDrawingBuffer: true }}
      >
        <color attach="background" args={["#0a0f1e"]} />
        <ambientLight intensity={0.5} />
        <directionalLight position={[5, 5, 5]} intensity={2} castShadow />
        <spotLight position={[-5, 5, 5]} intensity={1} angle={0.15} penumbra={1} castShadow />
        <Suspense fallback={null}>
          <Model />
        </Suspense>
      </Canvas>
    </motion.div>
  )
}
